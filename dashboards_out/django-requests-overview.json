{
   "__inputs": [ ],
   "__requires": [ ],
   "annotations": {
      "list": [ ]
   },
   "description": "A dashboard that monitors Django which focuses on giving a overview for requests. The dashboards were generated using [Django-mixin](https://github.com/adinhodovic/django-mixin). Open issues and create feature requests in the repository.",
   "editable": true,
   "links": [
      {
         "asDropdown": true,
         "includeVars": true,
         "keepTime": true,
         "tags": [
            "django",
            "django-mixin"
         ],
         "targetBlank": true,
         "title": "Django",
         "type": "dashboards"
      }
   ],
   "panels": [
      {
         "collapsed": false,
         "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 0
         },
         "id": 1,
         "title": "Summary",
         "type": "row"
      },
      {
         "datasource": {
            "type": "prometheus",
            "uid": "$datasource"
         },
         "fieldConfig": {
            "defaults": {
               "mappings": [ ],
               "thresholds": {
                  "steps": [
                     {
                        "color": "green",
                        "value": 0
                     }
                  ]
               },
               "unit": "reqps"
            }
         },
         "gridPos": {
            "h": 4,
            "w": 6,
            "x": 0,
            "y": 1
         },
         "id": 2,
         "pluginVersion": "v11.4.0",
         "targets": [
            {
               "datasource": {
                  "type": "prometheus",
                  "uid": "${datasource}"
               },
               "expr": "round(\n  sum(\n    rate(\n      django_http_requests_total_by_view_transport_method_total{\n        cluster=\"$cluster\",\nnamespace=\"$namespace\",\njob=~\"$job\"\n,\nview=~\"$view\",\nview!~\"<unnamed view>|health_check:health_check_home|prometheus-django-metrics\"\n,\nmethod=~\"$method\"\n\n      }[$__rate_interval]\n    )\n  ), 0.001\n)\n"
            }
         ],
         "title": "Request Volume",
         "type": "stat"
      },
      {
         "datasource": {
            "type": "prometheus",
            "uid": "$datasource"
         },
         "fieldConfig": {
            "defaults": {
               "mappings": [
                  {
                     "color": "red",
                     "value": 0.90000000000000002
                  },
                  {
                     "color": "yellow",
                     "value": 0.94999999999999996
                  },
                  {
                     "color": "green",
                     "value": 0.98999999999999999
                  }
               ],
               "thresholds": {
                  "steps": [
                     {
                        "color": "green",
                        "value": 0
                     }
                  ]
               },
               "unit": "percentunit"
            }
         },
         "gridPos": {
            "h": 4,
            "w": 6,
            "x": 6,
            "y": 1
         },
         "id": 3,
         "pluginVersion": "v11.4.0",
         "targets": [
            {
               "datasource": {
                  "type": "prometheus",
                  "uid": "${datasource}"
               },
               "expr": "sum(\n  rate(\n    django_http_responses_total_by_status_view_method_total{\n      cluster=\"$cluster\",\nnamespace=\"$namespace\",\njob=~\"$job\"\n,\nview=~\"$view\",\nview!~\"<unnamed view>|health_check:health_check_home|prometheus-django-metrics\"\n,\nmethod=~\"$method\"\n,\n      status!~\"[4-5].*\"\n    }[$__rate_interval]\n  )\n) /\nsum(\n  rate(\n    django_http_responses_total_by_status_view_method_total{\n      cluster=\"$cluster\",\nnamespace=\"$namespace\",\njob=~\"$job\"\n,\nview=~\"$view\",\nview!~\"<unnamed view>|health_check:health_check_home|prometheus-django-metrics\"\n,\nmethod=~\"$method\"\n,\n    }[$__rate_interval]\n  )\n)\n"
            }
         ],
         "title": "Success Rate (non 4-5xx responses)",
         "type": "stat"
      },
      {
         "datasource": {
            "type": "prometheus",
            "uid": "$datasource"
         },
         "description": "95th percentile of request latency",
         "fieldConfig": {
            "defaults": {
               "mappings": [
                  {
                     "color": "green",
                     "value": 0
                  },
                  {
                     "color": "yellow",
                     "value": 2500
                  },
                  {
                     "color": "red",
                     "value": 5000
                  }
               ],
               "thresholds": {
                  "steps": [
                     {
                        "color": "green",
                        "value": 0
                     }
                  ]
               },
               "unit": "s"
            }
         },
         "gridPos": {
            "h": 4,
            "w": 6,
            "x": 12,
            "y": 1
         },
         "id": 4,
         "pluginVersion": "v11.4.0",
         "targets": [
            {
               "datasource": {
                  "type": "prometheus",
                  "uid": "${datasource}"
               },
               "expr": "histogram_quantile(0.95,\n  sum (\n    irate(\n      django_http_requests_latency_seconds_by_view_method_bucket{\n        cluster=\"$cluster\",\nnamespace=\"$namespace\",\njob=~\"$job\"\n,\nview=~\"$view\",\nview!~\"<unnamed view>|health_check:health_check_home|prometheus-django-metrics\"\n\n      }[$__rate_interval]\n    )\n  ) by (job, le)\n)\n"
            }
         ],
         "title": "Request Latency (P95)",
         "type": "stat"
      },
      {
         "datasource": {
            "type": "prometheus",
            "uid": "$datasource"
         },
         "description": "95th percentile of request body size",
         "fieldConfig": {
            "defaults": {
               "mappings": [
                  {
                     "color": "red",
                     "value": 0.10000000000000001
                  },
                  {
                     "color": "yellow",
                     "value": 0.20000000000000001
                  },
                  {
                     "color": "green",
                     "value": 0.29999999999999999
                  }
               ],
               "thresholds": {
                  "steps": [
                     {
                        "color": "green",
                        "value": 0
                     }
                  ]
               },
               "unit": "decbytes"
            }
         },
         "gridPos": {
            "h": 4,
            "w": 6,
            "x": 18,
            "y": 1
         },
         "id": 5,
         "pluginVersion": "v11.4.0",
         "targets": [
            {
               "datasource": {
                  "type": "prometheus",
                  "uid": "${datasource}"
               },
               "expr": "histogram_quantile(0.95,\n  sum (\n    rate (\n      django_http_requests_body_total_bytes_bucket {\n        cluster=\"$cluster\",\nnamespace=\"$namespace\",\njob=~\"$job\"\n\n      }[$__rate_interval]\n    )\n  ) by (job, le)\n)\n"
            }
         ],
         "title": "Request Body Size (P95)",
         "type": "stat"
      },
      {
         "collapsed": false,
         "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 5
         },
         "id": 6,
         "title": "API Views & Other",
         "type": "row"
      },
      {
         "datasource": {
            "type": "prometheus",
            "uid": "$datasource"
         },
         "description": "Response status codes for API and other views (non-admin)",
         "fieldConfig": {
            "defaults": {
               "custom": {
                  "axisSoftMin": 0,
                  "fillOpacity": 100,
                  "lineWidth": 1,
                  "stacking": {
                     "mode": "normal"
                  }
               },
               "unit": "reqps"
            },
            "overrides": [
               {
                  "matcher": {
                     "id": "byName",
                     "options": "2xx"
                  },
                  "properties": [
                     {
                        "id": "color",
                        "value": {
                           "fixedColor": "green",
                           "mode": "fixed"
                        }
                     }
                  ]
               },
               {
                  "matcher": {
                     "id": "byName",
                     "options": "4xx"
                  },
                  "properties": [
                     {
                        "id": "color",
                        "value": {
                           "fixedColor": "yellow",
                           "mode": "fixed"
                        }
                     }
                  ]
               },
               {
                  "matcher": {
                     "id": "byName",
                     "options": "5xx"
                  },
                  "properties": [
                     {
                        "id": "color",
                        "value": {
                           "fixedColor": "red",
                           "mode": "fixed"
                        }
                     }
                  ]
               }
            ]
         },
         "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 6
         },
         "id": 7,
         "options": {
            "legend": {
               "calcs": [
                  "mean",
                  "max"
               ],
               "displayMode": "table",
               "placement": "right",
               "showLegend": true,
               "sortBy": "Mean",
               "sortDesc": true
            },
            "tooltip": {
               "mode": "multi",
               "sort": "desc"
            }
         },
         "pluginVersion": "v11.4.0",
         "targets": [
            {
               "datasource": {
                  "type": "prometheus",
                  "uid": "$datasource"
               },
               "exemplar": false,
               "expr": "round(\n  sum(\n    rate(\n      django_http_responses_total_by_status_view_method_total{\n        cluster=\"$cluster\",\nnamespace=\"$namespace\",\njob=~\"$job\"\n,\nview=~\"$view\",\nview!~\"<unnamed view>|health_check:health_check_home|prometheus-django-metrics\"\n,\nmethod=~\"$method\"\n,\n        status=~\"2.*\",\n        view!~\"admin.*\",\n      }[$__rate_interval]\n    ) > 0\n  ) by (namespace, job, view), 0.001\n)\n",
               "legendFormat": "{{ view }} / 2xx"
            },
            {
               "datasource": {
                  "type": "prometheus",
                  "uid": "$datasource"
               },
               "exemplar": false,
               "expr": "round(\n  sum(\n    rate(\n      django_http_responses_total_by_status_view_method_total{\n        cluster=\"$cluster\",\nnamespace=\"$namespace\",\njob=~\"$job\"\n,\nview=~\"$view\",\nview!~\"<unnamed view>|health_check:health_check_home|prometheus-django-metrics\"\n,\nmethod=~\"$method\"\n,\n        status=~\"4.*\",\n        view!~\"admin.*\",\n      }[$__rate_interval]\n    ) > 0\n  ) by (namespace, job, view), 0.001\n)\n",
               "legendFormat": "{{ view }} / 4xx"
            },
            {
               "datasource": {
                  "type": "prometheus",
                  "uid": "$datasource"
               },
               "exemplar": false,
               "expr": "round(\n  sum(\n    rate(\n      django_http_responses_total_by_status_view_method_total{\n        cluster=\"$cluster\",\nnamespace=\"$namespace\",\njob=~\"$job\"\n,\nview=~\"$view\",\nview!~\"<unnamed view>|health_check:health_check_home|prometheus-django-metrics\"\n,\nmethod=~\"$method\"\n,\n        status=~\"5.*\",\n        view!~\"admin.*\",\n      }[$__rate_interval]\n    ) > 0\n  ) by (namespace, job, view), 0.001\n)\n",
               "legendFormat": "{{ view }} / 5xx"
            }
         ],
         "title": "API & Other Views Response Status",
         "type": "timeseries"
      },
      {
         "datasource": {
            "type": "prometheus",
            "uid": "$datasource"
         },
         "fieldConfig": {
            "defaults": {
               "unit": "dtdurations"
            },
            "overrides": [
               {
                  "matcher": {
                     "id": "byName",
                     "options": "View"
                  },
                  "properties": [
                     {
                        "id": "links",
                        "value": [
                           {
                              "targetBlank": true,
                              "title": "Go To View",
                              "type": "dashboard",
                              "url": "/d/django-requests-by-view-jkwq/django-requests-by-view?var-namespace=${__data.fields.Namespace}&var-job=${__data.fields.Job}&var-view=${__data.fields.View}"
                           }
                        ]
                     }
                  ]
               }
            ]
         },
         "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 6
         },
         "id": 8,
         "options": {
            "footer": {
               "enablePagination": true
            },
            "sortBy": [
               {
                  "desc": true,
                  "displayName": "P50 Latency"
               }
            ]
         },
         "pluginVersion": "v11.4.0",
         "targets": [
            {
               "datasource": {
                  "type": "prometheus",
                  "uid": "$datasource"
               },
               "expr": "histogram_quantile(0.50,\n  sum(\n    rate(\n      django_http_requests_latency_seconds_by_view_method_bucket{\n        cluster=\"$cluster\",\nnamespace=\"$namespace\",\njob=~\"$job\"\n,\nview=~\"$view\",\nview!~\"<unnamed view>|health_check:health_check_home|prometheus-django-metrics\"\n,\nmethod=~\"$method\"\n,\n        view!~\"admin.*\"\n      }[1h]\n    ) > 0\n  ) by (namespace, job, view, le)\n)\n",
               "format": "table",
               "instant": true
            },
            {
               "datasource": {
                  "type": "prometheus",
                  "uid": "$datasource"
               },
               "expr": "histogram_quantile(0.95,\n  sum(\n    rate(\n      django_http_requests_latency_seconds_by_view_method_bucket{\n        cluster=\"$cluster\",\nnamespace=\"$namespace\",\njob=~\"$job\"\n,\nview=~\"$view\",\nview!~\"<unnamed view>|health_check:health_check_home|prometheus-django-metrics\"\n,\nmethod=~\"$method\"\n,\n        view!~\"admin.*\"\n      }[1h]\n    ) > 0\n  ) by (namespace, job, view, le)\n)\n",
               "format": "table",
               "instant": true
            },
            {
               "datasource": {
                  "type": "prometheus",
                  "uid": "$datasource"
               },
               "expr": "histogram_quantile(0.99,\n  sum(\n    rate(\n      django_http_requests_latency_seconds_by_view_method_bucket{\n        cluster=\"$cluster\",\nnamespace=\"$namespace\",\njob=~\"$job\"\n,\nview=~\"$view\",\nview!~\"<unnamed view>|health_check:health_check_home|prometheus-django-metrics\"\n,\nmethod=~\"$method\"\n,\n        view!~\"admin.*\"\n      }[1h]\n    ) > 0\n  ) by (namespace, job, view, le)\n)\n",
               "format": "table",
               "instant": true
            }
         ],
         "title": "API & Other Views Request Latency [1h]",
         "transformations": [
            {
               "id": "merge"
            },
            {
               "id": "organize",
               "options": {
                  "excludeByName": {
                     "Time": true
                  },
                  "indexByName": {
                     "Value #A": 3,
                     "Value #B": 4,
                     "Value #C": 5,
                     "job": 1,
                     "namespace": 0,
                     "view": 2
                  },
                  "renameByName": {
                     "Value #A": "P50 Latency",
                     "Value #B": "P95 Latency",
                     "Value #C": "P99 Latency",
                     "job": "Job",
                     "namespace": "Namespace",
                     "view": "View"
                  }
               }
            }
         ],
         "type": "table"
      },
      {
         "collapsed": false,
         "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 16
         },
         "id": 9,
         "title": "Admin Views",
         "type": "row"
      },
      {
         "datasource": {
            "type": "prometheus",
            "uid": "$datasource"
         },
         "description": "Response status codes for admin views",
         "fieldConfig": {
            "defaults": {
               "custom": {
                  "axisSoftMin": 0,
                  "fillOpacity": 100,
                  "lineWidth": 1,
                  "stacking": {
                     "mode": "normal"
                  }
               },
               "unit": "reqps"
            },
            "overrides": [
               {
                  "matcher": {
                     "id": "byName",
                     "options": "2xx"
                  },
                  "properties": [
                     {
                        "id": "color",
                        "value": {
                           "fixedColor": "green",
                           "mode": "fixed"
                        }
                     }
                  ]
               },
               {
                  "matcher": {
                     "id": "byName",
                     "options": "4xx"
                  },
                  "properties": [
                     {
                        "id": "color",
                        "value": {
                           "fixedColor": "yellow",
                           "mode": "fixed"
                        }
                     }
                  ]
               },
               {
                  "matcher": {
                     "id": "byName",
                     "options": "5xx"
                  },
                  "properties": [
                     {
                        "id": "color",
                        "value": {
                           "fixedColor": "red",
                           "mode": "fixed"
                        }
                     }
                  ]
               }
            ]
         },
         "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 17
         },
         "id": 10,
         "options": {
            "legend": {
               "calcs": [
                  "mean",
                  "max"
               ],
               "displayMode": "table",
               "placement": "right",
               "showLegend": true,
               "sortBy": "Mean",
               "sortDesc": true
            },
            "tooltip": {
               "mode": "multi",
               "sort": "desc"
            }
         },
         "pluginVersion": "v11.4.0",
         "targets": [
            {
               "datasource": {
                  "type": "prometheus",
                  "uid": "$datasource"
               },
               "exemplar": false,
               "expr": "round(\n  sum(\n    rate(\n      django_http_responses_total_by_status_view_method_total{\n        cluster=\"$cluster\",\nnamespace=\"$namespace\",\njob=~\"$job\"\n,\nview=~\"$view\",\nview!~\"<unnamed view>|health_check:health_check_home|prometheus-django-metrics\"\n,\nmethod=~\"$method\"\n,\n        status=~\"2.*\",\n        view=~\"admin.*\",\n      }[$__rate_interval]\n    ) > 0\n  ) by (namespace, job, view), 0.001\n)\n",
               "legendFormat": "{{ view }} / 2xx"
            },
            {
               "datasource": {
                  "type": "prometheus",
                  "uid": "$datasource"
               },
               "exemplar": false,
               "expr": "round(\n  sum(\n    rate(\n      django_http_responses_total_by_status_view_method_total{\n        cluster=\"$cluster\",\nnamespace=\"$namespace\",\njob=~\"$job\"\n,\nview=~\"$view\",\nview!~\"<unnamed view>|health_check:health_check_home|prometheus-django-metrics\"\n,\nmethod=~\"$method\"\n,\n        status=~\"4.*\",\n        view=~\"admin.*\",\n      }[$__rate_interval]\n    ) > 0\n  ) by (namespace, job, view), 0.001\n)\n",
               "legendFormat": "{{ view }} / 4xx"
            },
            {
               "datasource": {
                  "type": "prometheus",
                  "uid": "$datasource"
               },
               "exemplar": false,
               "expr": "round(\n  sum(\n    rate(\n      django_http_responses_total_by_status_view_method_total{\n        cluster=\"$cluster\",\nnamespace=\"$namespace\",\njob=~\"$job\"\n,\nview=~\"$view\",\nview!~\"<unnamed view>|health_check:health_check_home|prometheus-django-metrics\"\n,\nmethod=~\"$method\"\n,\n        status=~\"5.*\",\n        view=~\"admin.*\",\n      }[$__rate_interval]\n    ) > 0\n  ) by (namespace, job, view), 0.001\n)\n",
               "legendFormat": "{{ view }} / 5xx"
            }
         ],
         "title": "Admin Views Response Status",
         "type": "timeseries"
      },
      {
         "datasource": {
            "type": "prometheus",
            "uid": "$datasource"
         },
         "fieldConfig": {
            "defaults": {
               "unit": "dtdurations"
            },
            "overrides": [
               {
                  "matcher": {
                     "id": "byName",
                     "options": "View"
                  },
                  "properties": [
                     {
                        "id": "links",
                        "value": [
                           {
                              "targetBlank": true,
                              "title": "Go To View",
                              "type": "dashboard",
                              "url": "/d/django-requests-by-view-jkwq/django-requests-by-view?var-namespace=${__data.fields.Namespace}&var-job=${__data.fields.Job}&var-view=${__data.fields.View}"
                           }
                        ]
                     }
                  ]
               }
            ]
         },
         "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 17
         },
         "id": 11,
         "options": {
            "footer": {
               "enablePagination": true
            },
            "sortBy": [
               {
                  "desc": true,
                  "displayName": "P50 Latency"
               }
            ]
         },
         "pluginVersion": "v11.4.0",
         "targets": [
            {
               "datasource": {
                  "type": "prometheus",
                  "uid": "$datasource"
               },
               "expr": "histogram_quantile(0.50,\n  sum(\n    rate(\n      django_http_requests_latency_seconds_by_view_method_bucket{\n        cluster=\"$cluster\",\nnamespace=\"$namespace\",\njob=~\"$job\"\n,\nview=~\"$view\",\nview!~\"<unnamed view>|health_check:health_check_home|prometheus-django-metrics\"\n,\nmethod=~\"$method\"\n,\n        view=~\"admin.*\"\n      }[1h]\n    ) > 0\n  ) by (namespace, job, view, le)\n)\n",
               "format": "table",
               "instant": true
            },
            {
               "datasource": {
                  "type": "prometheus",
                  "uid": "$datasource"
               },
               "expr": "histogram_quantile(0.95,\n  sum(\n    rate(\n      django_http_requests_latency_seconds_by_view_method_bucket{\n        cluster=\"$cluster\",\nnamespace=\"$namespace\",\njob=~\"$job\"\n,\nview=~\"$view\",\nview!~\"<unnamed view>|health_check:health_check_home|prometheus-django-metrics\"\n,\nmethod=~\"$method\"\n,\n        view=~\"admin.*\"\n      }[1h]\n    ) > 0\n  ) by (namespace, job, view, le)\n)\n",
               "format": "table",
               "instant": true
            },
            {
               "datasource": {
                  "type": "prometheus",
                  "uid": "$datasource"
               },
               "expr": "histogram_quantile(0.99,\n  sum(\n    rate(\n      django_http_requests_latency_seconds_by_view_method_bucket{\n        cluster=\"$cluster\",\nnamespace=\"$namespace\",\njob=~\"$job\"\n,\nview=~\"$view\",\nview!~\"<unnamed view>|health_check:health_check_home|prometheus-django-metrics\"\n,\nmethod=~\"$method\"\n,\n        view=~\"admin.*\"\n      }[1h]\n    ) > 0\n  ) by (namespace, job, view, le)\n)\n",
               "format": "table",
               "instant": true
            }
         ],
         "title": "Admin Views Request Latency [1h]",
         "transformations": [
            {
               "id": "merge"
            },
            {
               "id": "organize",
               "options": {
                  "excludeByName": {
                     "Time": true
                  },
                  "indexByName": {
                     "Value #A": 3,
                     "Value #B": 4,
                     "Value #C": 5,
                     "job": 1,
                     "namespace": 0,
                     "view": 2
                  },
                  "renameByName": {
                     "Value #A": "P50 Latency",
                     "Value #B": "P95 Latency",
                     "Value #C": "P99 Latency",
                     "job": "Job",
                     "namespace": "Namespace",
                     "view": "View"
                  }
               }
            }
         ],
         "type": "table"
      },
      {
         "collapsed": false,
         "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 26
         },
         "id": 12,
         "title": "Weekly Breakdown",
         "type": "row"
      },
      {
         "datasource": {
            "type": "prometheus",
            "uid": "$datasource"
         },
         "description": "Top 10 views that raised exceptions in the last 7 days",
         "fieldConfig": {
            "defaults": {
               "unit": "short"
            },
            "overrides": [
               {
                  "matcher": {
                     "id": "byName",
                     "options": "View"
                  },
                  "properties": [
                     {
                        "id": "links",
                        "value": [
                           {
                              "targetBlank": true,
                              "title": "Go To View",
                              "type": "dashboard",
                              "url": "/d/django-requests-by-view-jkwq/django-requests-by-view?var-namespace=${__data.fields.Namespace}&var-job=${__data.fields.Job}&var-view=${__data.fields.View}"
                           }
                        ]
                     }
                  ]
               }
            ]
         },
         "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 27
         },
         "id": 13,
         "options": {
            "footer": {
               "enablePagination": true
            },
            "sortBy": [
               {
                  "desc": true,
                  "displayName": "Value"
               }
            ]
         },
         "pluginVersion": "v11.4.0",
         "targets": [
            {
               "datasource": {
                  "type": "prometheus",
                  "uid": "$datasource"
               },
               "expr": "round(\n  topk(10,\n    sum by (namespace, job, view) (\n      increase(\n        django_http_exceptions_total_by_view_total{\n          cluster=\"$cluster\",\nnamespace=\"$namespace\",\njob=~\"$job\"\n,\nview=~\"$view\",\nview!~\"<unnamed view>|health_check:health_check_home|prometheus-django-metrics\"\n\n        }[1w]\n      ) > 0\n    )\n  )\n)\n",
               "format": "table",
               "instant": true
            }
         ],
         "title": "Top Exceptions by View (1w)",
         "transformations": [
            {
               "id": "organize",
               "options": {
                  "excludeByName": {
                     "Time": true
                  },
                  "indexByName": {
                     "job": 1,
                     "namespace": 0,
                     "view": 2
                  },
                  "renameByName": {
                     "job": "Job",
                     "namespace": "Namespace",
                     "view": "View"
                  }
               }
            }
         ],
         "type": "table"
      },
      {
         "datasource": {
            "type": "prometheus",
            "uid": "$datasource"
         },
         "description": "Top 10 exception types that were raised in the last 7 days",
         "fieldConfig": {
            "defaults": {
               "unit": "short"
            },
            "overrides": [ ]
         },
         "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 27
         },
         "id": 14,
         "options": {
            "footer": {
               "enablePagination": true
            },
            "sortBy": [
               {
                  "desc": true,
                  "displayName": "Value"
               }
            ]
         },
         "pluginVersion": "v11.4.0",
         "targets": [
            {
               "datasource": {
                  "type": "prometheus",
                  "uid": "$datasource"
               },
               "expr": "round(\n  topk(10,\n    sum(\n      increase(\n        django_http_exceptions_total_by_type_total{\n          cluster=\"$cluster\",\nnamespace=\"$namespace\",\njob=~\"$job\"\n\n        }[1w]\n      ) > 0\n    ) by (namespace, job, type)\n  )\n)\n",
               "format": "table",
               "instant": true
            }
         ],
         "title": "Top Exceptions by Type (1w)",
         "transformations": [
            {
               "id": "organize",
               "options": {
                  "excludeByName": {
                     "Time": true
                  },
                  "indexByName": {
                     "job": 1,
                     "namespace": 0,
                     "type": 2
                  },
                  "renameByName": {
                     "job": "Job",
                     "namespace": "Namespace",
                     "type": "Type"
                  }
               }
            }
         ],
         "type": "table"
      },
      {
         "datasource": {
            "type": "prometheus",
            "uid": "$datasource"
         },
         "description": "Top 10 views by number of responses in the last 7 days",
         "fieldConfig": {
            "defaults": {
               "unit": "short"
            },
            "overrides": [
               {
                  "matcher": {
                     "id": "byName",
                     "options": "View"
                  },
                  "properties": [
                     {
                        "id": "links",
                        "value": [
                           {
                              "targetBlank": true,
                              "title": "Go To View",
                              "type": "dashboard",
                              "url": "/d/django-requests-by-view-jkwq/django-requests-by-view?var-namespace=${__data.fields.Namespace}&var-job=${__data.fields.Job}&var-view=${__data.fields.View}"
                           }
                        ]
                     }
                  ]
               }
            ]
         },
         "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 35
         },
         "id": 15,
         "options": {
            "footer": {
               "enablePagination": true
            },
            "sortBy": [
               {
                  "desc": true,
                  "displayName": "Value"
               }
            ]
         },
         "pluginVersion": "v11.4.0",
         "targets": [
            {
               "datasource": {
                  "type": "prometheus",
                  "uid": "$datasource"
               },
               "expr": "round(\n  topk(10,\n    sum(\n      increase(\n        django_http_responses_total_by_status_view_method_total{\n          cluster=\"$cluster\",\nnamespace=\"$namespace\",\njob=~\"$job\"\n,\nview=~\"$view\",\nview!~\"<unnamed view>|health_check:health_check_home|prometheus-django-metrics\"\n,\nmethod=~\"$method\"\n\n        }[1w]\n      ) > 0\n    ) by (namespace, job, view)\n  )\n)\n",
               "format": "table",
               "instant": true
            }
         ],
         "title": "Top Responses by View (1w)",
         "transformations": [
            {
               "id": "organize",
               "options": {
                  "excludeByName": {
                     "Time": true
                  },
                  "indexByName": {
                     "job": 1,
                     "namespace": 0,
                     "view": 2
                  },
                  "renameByName": {
                     "job": "Job",
                     "namespace": "Namespace",
                     "view": "View"
                  }
               }
            }
         ],
         "type": "table"
      },
      {
         "datasource": {
            "type": "prometheus",
            "uid": "$datasource"
         },
         "description": "Top 10 templates rendered in the last 7 days",
         "fieldConfig": {
            "defaults": {
               "unit": "short"
            },
            "overrides": [ ]
         },
         "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 35
         },
         "id": 16,
         "options": {
            "footer": {
               "enablePagination": true
            },
            "sortBy": [
               {
                  "desc": true,
                  "displayName": "Value"
               }
            ]
         },
         "pluginVersion": "v11.4.0",
         "targets": [
            {
               "datasource": {
                  "type": "prometheus",
                  "uid": "$datasource"
               },
               "expr": "topk(10,\n  round(\n    sum(\n      increase(\n        django_http_responses_total_by_templatename_total{\n          cluster=\"$cluster\",\nnamespace=\"$namespace\",\njob=~\"$job\"\n,\n          templatename!~\".*'health_check/index.html'.*|None\"\n        }[1w]\n      ) > 0\n    ) by (namespace, job, templatename)\n  )\n)\n",
               "format": "table",
               "instant": true
            }
         ],
         "title": "Top Templates (1w)",
         "transformations": [
            {
               "id": "organize",
               "options": {
                  "excludeByName": {
                     "Time": true
                  },
                  "indexByName": {
                     "job": 1,
                     "namespace": 0,
                     "templatename": 2
                  },
                  "renameByName": {
                     "job": "Job",
                     "namespace": "Namespace",
                     "templatename": "Template Name"
                  }
               }
            }
         ],
         "type": "table"
      }
   ],
   "schemaVersion": 39,
   "tags": [
      "django",
      "django-mixin"
   ],
   "templating": {
      "list": [
         {
            "current": {
               "selected": true,
               "text": "default",
               "value": "default"
            },
            "label": "Data source",
            "name": "datasource",
            "query": "prometheus",
            "type": "datasource"
         },
         {
            "datasource": {
               "type": "prometheus",
               "uid": "${datasource}"
            },
            "hide": 2,
            "label": "Cluster",
            "name": "cluster",
            "query": "label_values(django_http_responses_total_by_status_view_method_total{}, cluster)",
            "refresh": 2,
            "sort": 1,
            "type": "query"
         },
         {
            "datasource": {
               "type": "prometheus",
               "uid": "${datasource}"
            },
            "includeAll": false,
            "label": "Namespace",
            "multi": false,
            "name": "namespace",
            "query": "label_values(django_http_responses_total_by_status_view_method_total{cluster=\"$cluster\"}, namespace)",
            "refresh": 2,
            "sort": 1,
            "type": "query"
         },
         {
            "datasource": {
               "type": "prometheus",
               "uid": "${datasource}"
            },
            "includeAll": false,
            "label": "Job",
            "multi": false,
            "name": "job",
            "query": "label_values(django_http_responses_total_by_status_view_method_total{cluster=\"$cluster\", namespace=\"$namespace\"}, job)",
            "refresh": 2,
            "sort": 1,
            "type": "query"
         },
         {
            "datasource": {
               "type": "prometheus",
               "uid": "${datasource}"
            },
            "includeAll": true,
            "label": "View",
            "multi": true,
            "name": "view",
            "query": "label_values(django_http_responses_total_by_status_view_method_total{cluster=\"$cluster\", namespace=\"$namespace\", job=~\"$job\", view!~\"<unnamed view>|health_check:health_check_home|prometheus-django-metrics\"}, view)",
            "refresh": 2,
            "sort": 1,
            "type": "query"
         },
         {
            "datasource": {
               "type": "prometheus",
               "uid": "${datasource}"
            },
            "includeAll": true,
            "label": "Method",
            "multi": true,
            "name": "method",
            "query": "label_values(django_http_responses_total_by_status_view_method_total{cluster=\"$cluster\", namespace=\"$namespace\", job=~\"$job\", view=\"$view\"}, method)",
            "refresh": 2,
            "sort": 1,
            "type": "query"
         }
      ]
   },
   "time": {
      "from": "now-6h",
      "to": "now"
   },
   "timezone": "utc",
   "title": "Django / Requests / Overview",
   "uid": "django-requests-jkwq"
}
